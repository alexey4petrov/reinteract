From 94782e914c1fb8e5fc62331c5f93a6648421c5be Mon Sep 17 00:00:00 2001
From: Benjamin Berg <benjamin@sipsolutions.net>
Date: Sat, 6 Aug 2011 10:37:21 +0200
Subject: [PATCH] Fix polling for new data in cups print backend (bug #599664)

diff -up gtk+-2.24.0//modules/printbackends/cups/gtkcupsutils.c.polling gtk+-2.24.0//modules/printbackends/cups/gtkcupsutils.c
--- gtk+-2.24.0//modules/printbackends/cups/gtkcupsutils.c.polling	2011-09-27 15:39:14.000000000 -0400
+++ gtk+-2.24.0//modules/printbackends/cups/gtkcupsutils.c	2011-09-27 15:40:39.000000000 -0400
@@ -253,34 +253,43 @@ gtk_cups_request_free (GtkCupsRequest *r
 }
 
 gboolean 
-gtk_cups_request_read_write (GtkCupsRequest *request)
+gtk_cups_request_read_write (GtkCupsRequest *request, gboolean connect_only)
 {
-  if (request->type == GTK_CUPS_POST)
-    post_states[request->state] (request);
-  else if (request->type == GTK_CUPS_GET)
-    get_states[request->state] (request);
+  if (connect_only && request->state != GTK_CUPS_REQUEST_START)
+    return FALSE;
 
-  if (request->attempts > _GTK_CUPS_MAX_ATTEMPTS && 
-      request->state != GTK_CUPS_REQUEST_DONE)
+  do
     {
-      /* TODO: should add a status or error code for too many failed attempts */
-      gtk_cups_result_set_error (request->result, 
-                                 GTK_CUPS_ERROR_GENERAL,
-                                 0,
-                                 0, 
-                                 "Too many failed attempts");
+      if (request->type == GTK_CUPS_POST)
+        post_states[request->state] (request);
+      else if (request->type == GTK_CUPS_GET)
+        get_states[request->state] (request);
 
-      request->state = GTK_CUPS_REQUEST_DONE;
-      request->poll_state = GTK_CUPS_HTTP_IDLE;
-    }
-    
-  if (request->state == GTK_CUPS_REQUEST_DONE)
-    {
-      request->poll_state = GTK_CUPS_HTTP_IDLE;
-      return TRUE;
+      if (request->attempts > _GTK_CUPS_MAX_ATTEMPTS &&
+          request->state != GTK_CUPS_REQUEST_DONE)
+        {
+          /* TODO: should add a status or error code for too many failed attempts */
+          gtk_cups_result_set_error (request->result,
+                                     GTK_CUPS_ERROR_GENERAL,
+                                     0,
+                                     0,
+                                     "Too many failed attempts");
+
+          request->state = GTK_CUPS_REQUEST_DONE;
+        }
+
+      if (request->state == GTK_CUPS_REQUEST_DONE)
+        {
+          request->poll_state = GTK_CUPS_HTTP_IDLE;
+          return TRUE;
+        }
     }
-  else
-    return FALSE;
+  /* We need to recheck using httpCheck if the poll_state is read, because
+   * Cups has an internal read buffer. And if this buffer is filled, we may
+   * never get a poll event again. */
+  while (request->poll_state == GTK_CUPS_HTTP_READ && request->http && httpCheck(request->http));
+
+  return FALSE;
 }
 
 GtkCupsPollState 
@@ -643,6 +652,7 @@ static void
 _connect (GtkCupsRequest *request)
 {
   request->poll_state = GTK_CUPS_HTTP_IDLE;
+  request->bytes_received = 0;
 
   if (request->http == NULL)
     {
@@ -1402,20 +1412,14 @@ _get_read_data (GtkCupsRequest *request)
 #if HAVE_CUPS_API_1_2
   bytes = httpRead2 (request->http, buffer, sizeof (buffer));
 #else
-  bytes = httpRead (request->http, buffer, sizeof (buffer));
+  bytes = httpReadb (request->http, buffer, sizeof (buffer));
 #endif /* HAVE_CUPS_API_1_2 */
 
+  request->bytes_received += bytes;
+
   GTK_NOTE (PRINTING,
             g_print ("CUPS Backend: %" G_GSIZE_FORMAT " bytes read\n", bytes));
   
-  if (bytes == 0)
-    {
-      request->state = GTK_CUPS_GET_DONE;
-      request->poll_state = GTK_CUPS_HTTP_IDLE;
-
-      return;
-    }
-  
   io_status =
     g_io_channel_write_chars (request->data_io, 
                               buffer, 
@@ -1435,6 +1439,19 @@ _get_read_data (GtkCupsRequest *request)
                                  error->message);
       g_error_free (error);
     }
+
+  /* Stop if we do not expect any more data or EOF was received. */
+#if HAVE_CUPS_API_1_2
+  if (httpGetLength2 (request->http) <= request->bytes_received || bytes == 0)
+#else
+  if (httpGetLength (request->http) <= request->bytes_received || bytes == 0)
+#endif /* HAVE_CUPS_API_1_2 */
+    {
+      request->state = GTK_CUPS_GET_DONE;
+      request->poll_state = GTK_CUPS_HTTP_IDLE;
+
+      return;
+    }
 }
 
 gboolean
diff -up gtk+-2.24.0//modules/printbackends/cups/gtkcupsutils.h.polling gtk+-2.24.0//modules/printbackends/cups/gtkcupsutils.h
--- gtk+-2.24.0//modules/printbackends/cups/gtkcupsutils.h.polling	2011-09-27 15:39:14.000000000 -0400
+++ gtk+-2.24.0//modules/printbackends/cups/gtkcupsutils.h	2011-09-27 15:39:34.000000000 -0400
@@ -93,6 +93,7 @@ struct _GtkCupsRequest 
 
   gint state;
   GtkCupsPollState poll_state;
+  guint64 bytes_received;
 
   gchar *password;
   gchar *username;
@@ -172,7 +173,8 @@ void                    gtk_cups_request
 const char            * gtk_cups_request_ipp_get_string    (GtkCupsRequest     *request,
 							    ipp_tag_t           tag,
 							    const char         *name);
-gboolean                gtk_cups_request_read_write        (GtkCupsRequest     *request);
+gboolean                gtk_cups_request_read_write        (GtkCupsRequest     *request,
+                                                            gboolean            connect_only);
 GtkCupsPollState        gtk_cups_request_get_poll_state    (GtkCupsRequest     *request);
 void                    gtk_cups_request_free              (GtkCupsRequest     *request);
 GtkCupsResult         * gtk_cups_request_get_result        (GtkCupsRequest     *request);
diff -up gtk+-2.24.0//modules/printbackends/cups/gtkprintbackendcups.c.polling gtk+-2.24.0//modules/printbackends/cups/gtkprintbackendcups.c
--- gtk+-2.24.0//modules/printbackends/cups/gtkprintbackendcups.c.polling	2011-09-27 15:39:14.000000000 -0400
+++ gtk+-2.24.0//modules/printbackends/cups/gtkprintbackendcups.c	2011-09-27 15:39:34.000000000 -0400
@@ -92,6 +92,7 @@ typedef struct 
 
   http_t *http;
   GtkCupsRequest *request;
+  GtkCupsPollState poll_state;
   GPollFD *data_poll;
   GtkPrintBackendCups *backend;
   GtkPrintCupsResponseCallbackFunc callback;
@@ -917,11 +918,20 @@ cups_dispatch_add_poll (GSource *source)
 
   poll_state = gtk_cups_request_get_poll_state (dispatch->request);
 
+  /* Remove the old source if the poll state changed. */
+  if (poll_state != dispatch->poll_state && dispatch->data_poll != NULL)
+    {
+      g_source_remove_poll (source, dispatch->data_poll);
+      g_free (dispatch->data_poll);
+      dispatch->data_poll = NULL;
+    }
+
   if (dispatch->request->http != NULL)
     {
       if (dispatch->data_poll == NULL)
         {
 	  dispatch->data_poll = g_new0 (GPollFD, 1);
+	  dispatch->poll_state = poll_state;
 
 	  if (poll_state == GTK_CUPS_HTTP_READ)
 	    dispatch->data_poll->events = G_IO_IN | G_IO_HUP | G_IO_ERR | G_IO_PRI;
@@ -1093,13 +1103,11 @@ cups_dispatch_watch_check (GSource *sour
 
   poll_state = gtk_cups_request_get_poll_state (dispatch->request);
 
-  cups_dispatch_add_poll (source);
-    
   if (poll_state != GTK_CUPS_HTTP_IDLE && !dispatch->request->need_password)
     if (!(dispatch->data_poll->revents & dispatch->data_poll->events)) 
        return FALSE;
   
-  result = gtk_cups_request_read_write (dispatch->request);
+  result = gtk_cups_request_read_write (dispatch->request, FALSE);
   if (result && dispatch->data_poll != NULL)
     {
       g_source_remove_poll (source, dispatch->data_poll);
@@ -1130,8 +1138,8 @@ cups_dispatch_watch_prepare (GSource *so
             g_print ("CUPS Backend: %s <source %p>\n", G_STRFUNC, source));
 
   *timeout_ = -1;
-  
-  result = gtk_cups_request_read_write (dispatch->request);
+
+  result = gtk_cups_request_read_write (dispatch->request, TRUE);
 
   cups_dispatch_add_poll (source);
 
@@ -1231,7 +1239,12 @@ cups_dispatch_watch_finalize (GSource *s
       dispatch->backend = NULL;
     }
 
-  g_free (dispatch->data_poll);
+  if (dispatch->data_poll)
+    {
+      g_source_remove_poll (source, dispatch->data_poll);
+      g_free (dispatch->data_poll);
+      dispatch->data_poll = NULL;
+    }
 }
 
 static GSourceFuncs _cups_dispatch_watch_funcs = {
@@ -1260,6 +1273,7 @@ cups_request_execute (GtkPrintBackendCup
 
   dispatch->request = request;
   dispatch->backend = g_object_ref (print_backend);
+  dispatch->poll_state = GTK_CUPS_HTTP_IDLE;
   dispatch->data_poll = NULL;
   dispatch->callback = NULL;
   dispatch->callback_data = NULL;
